<?php
namespace proof\sql;
/**
 * timestamp Aug 4, 2012 11:48:43 AM
 *
 *
 * @author Lasana Murray  <dev@trinistorm.org>
 * @copyright 2012 Lasana Murray
 * @package proof\sql
 *
 *  Class representing SQLState after a statement has been excecuted.
 *  <i>This class should only be generated when an error occurs.</i>
 *
 */
use proof\util\Event;

class SQLEvent extends Event
{

    /**
     *  A five character alphanumeric identifier of the sql state defined in the ANSI SQL standard.
     * @var string $state
     * @access private
     */
    private $state;

    /**
     * The error code of the operation that caused this event
     * @var int $code
     * @access private
     */
    private $code;

    /**
     * An error message associated with the operation that caused this event.
     * @var string $message
     * @access private
     */
    private $message;

    /**
     * A reference to the connection used to execute this query.
     * @var proof\sql\PDOConnection    $con
     * @access private
     */
    private $con;

    /**
     * Constructs a new SQLState object.
     * @param array $info    Array generated by PDO::errorInfo().
     */
    public function __construct(array $info, PDOConnection $con, SQLCommand $source)
    {

        $this->state = $info[0];
        $this->code = $info[1];
        $this->message = $info[2];

        $this->con = $con;

        parent::__construct($source);

    }

    /**
     * Returns the ANSI code for the new state.
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Returns a database driver specific error code.
     * @return string
     */
    public function getCode()
    {
        return $this->code;
    }

    /**
     * Returns the message associated with the sql state.
     * @return string
     */
    public  function getMessage()
    {
        return $this->message;
    }

}