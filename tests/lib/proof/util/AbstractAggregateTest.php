<?php

namespace proof\util;


require_once dirname(__FILE__) . '/../../../proof/util/AbstractAggregate.php';

/**
 * Test class for AbstractAggregate.
 * Generated by PHPUnit on 2012-08-09 at 21:16:18.
 */
class AbstractAggregateTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var AbstractAggregate
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = $this->getMockForAbstractClass
                (__NAMESPACE__ . "\\AbstractAggregate", array (array ('one' => 1, 1)));

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers proof\util\AbstractAggregate::set
     * @todo Implement testSet().
     * @expectedException proof\util\IndexNotFoundException
     *
     */
    public function testSet()
    {

        $this->assertInstanceOf(get_class($this->object), $this->object->set(1, "value"));
        $this->assertInstanceOf(get_class($this->object), $this->object->set("one", "value"));

    }

    /**
     * @covers proof\util\AbstractAggregate::clear
     * @todo Implement testClear().
     */
    public function testClear()
    {
        $this->object->clear();

        $this->assertTrue($this->object->isEmpty());

    }

    /**
     * @covers proof\util\AbstractAggregate::indexAt
     * @todo Implement testIndexAt().
     */
    public function testIndexAt()
    {

        $this->assertTrue($this->object->indexAt('one'));
        $this->assertFalse($this->object->indexAt('two'));
        $this->assertTrue($this->object->indexAt(0));
        $this->assertFalse($this->object->indexAt(1));

    }

    /**
     * @covers proof\util\AbstractAggregate::itemAt
     * @todo Implement testItemAt().
     */
    public function testItemAt()
    {

        $this->assertTrue($this->object->itemAt('one'));
        $this->assertFalse($this->object->itemAt('two'));
        $this->assertTrue($this->object->itemAt(0));
        $this->assertFalse($this->object->itemAt(1));

    }

    /**
     * @covers proof\util\AbstractAggregate::get
     * @expectedException proof\util\IndexNotFoundException
     *
     */
    public function testGet()
    {

        $this->assertEquals(1, $this->object->get('one'));
        $this->assertEquals(1, $this->object->get(1));
        $this->assertNull($this->object->get('one'));
        $this->assertNull($this->object->get(1));

    }

    /**
     * @covers proof\util\AbstractAggregate::remove
     *
     */
    public function testRemove()
    {

        $this->assertTrue($this->object->remove('one'));
        $this->assertFalse($this->object->remove('two'));
        $this->assertTrue($this->object->remove(0));
        $this->assertFalse($this->object->remove(3));

    }

    /**
     * @covers proof\util\AbstractAggregate::isEmpty
     * @todo Implement testIsEmpty().
     */
    public function testIsEmpty()
    {

        $this->assertFalse($this->object->isEmpty());

        $stub = $this->getMockForAbstractClass(__NAMESPACE__ . "\\AbstractAggregate");

        $this->assertTrue($stub->isEmpty());

    }

    /**
     * @covers proof\util\AbstractAggregate::size
     * @todo Implement testSize().
     */
    public function testSize()
    {

        $this->assertEquals(2, $this->object->size());

        $this->object->clear();

        $this->assertEquals(0, $this->object->size());

    }

}

?>
