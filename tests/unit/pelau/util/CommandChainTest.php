<?php

namespace proof\util;

use proof\php\String;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-12-08 at 20:09:53.
 */
class CommandChainTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var CommandChain
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new CommandChain;

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers proof\util\CommandChain::add
     * @todo   Implement testAdd().
     */
    public function testHandledCommands()
    {
        $cmd = $this->getMockForAbstractClass("proof\util\ChainCommand", array ('onCommand'));

        $cmd->expects($this->any())->method('onCommand')->will($this->returnValue(true));

        $this->assertSame($this->object, $this->object->add($cmd));

        $this->assertSame($this->object, $this->object->add($this->getMockForAbstractClass(
                                "proof\util\ChainCommand", array ('onCommand'))));

        $this->assertSame($this->object, $this->object->add($this->getMockForAbstractClass(
                                "proof\util\ChainCommand", array ('onCommand'))));

        $this->assertTrue($this->object->runCommand(new String("test")));

    }

    public function testUnHandledCommands()
    {


        $this->assertSame($this->object, $this->object->add($this->getMockForAbstractClass(
                                "proof\util\ChainCommand", array ('onCommand'))));

        $this->assertSame($this->object, $this->object->add($this->getMockForAbstractClass(
                                "proof\util\ChainCommand", array ('onCommand'))));

        $this->assertFalse($this->object->runCommand(new String("test")));

    }

}
