<?php

namespace proof\sql;


/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-10-05 at 04:33:24.
 */
class PreparedStatementTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var PreparedStatement
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $mock = $this->getMockForAbstractClass("proof\\sql\\SQLPreparedStatement");

        $this->object = new PreparedStatement($mock);

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers proof\sql\PreparedStatement::bind
     * @todo   Implement testBind().
     */
    public function testBind()
    {

        $this->assertInstanceOf(get_class($this->object), $this->object->bind('A value'));

    }

    /**
     * @covers proof\sql\PreparedStatement::bindName
     * @todo   Implement testBindName().
     */
    public function testBindName()
    {

        $this->assertInstanceOf(get_class($this->object), $this->object->bind('key','value'));

    }

    /**
     * @covers proof\sql\PreparedStatement::addSQLEventListener
     * @todo   Implement testAddSQLEventListener().
     */
    public function testAddSQLEventListener()
    {
       $mock = $this->getMockForAbstractClass('proof\\sql\\SQLEventListener');
        $this->assertInstanceOf(get_class($this->object), $this->object->addSQLEventListener($mock));

    }

    /**
     * @covers proof\sql\PreparedStatement::fetch
     * @todo   Implement testFetch().
     */
    public function testFetch()
    {
        $mock = $this->getMockForAbstractClass("proof\\sql\\SQLPreparedStatement");

        $mock->expects($this->once())->method('fetch')->will($this->returnValue(1));

        $stmt = new PreparedStatement($mock);

        $cache = $this->getMockForAbstractClass("proof\\sql\\RowCache");

        $this->assertEquals(1, $stmt->fetch($cache));

    }

    /**
     * @covers proof\sql\PreparedStatement::push
     * @todo   Implement testPush().
     */
    public function testPush()
    {

        $mock = $this->getMockForAbstractClass("proof\\sql\\SQLPreparedStatement");

        $mock->expects($this->once())->method('push')->will($this->returnValue(1));

        $stmt = new PreparedStatement($mock);

        $this->assertEquals(1, $stmt->push());

    }

}
