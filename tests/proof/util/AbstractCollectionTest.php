<?php

namespace pelau\util;


/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-10-14 at 13:48:59.
 */
class AbstractCollectionTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var AbstractCollection
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = $this->getMockForAbstractClass("pelau\\util\\AbstractCollection");

    }

    /**
     * @covers pelau\util\AbstractCollection::indexAt
     */
    public function testIndexAt()
    {

        $obj = $this->getMockForAbstractClass("pelau\\util\\AbstractCollection", array(array("one"=>NULL, 1=>NULL)));

        $this->assertTrue($obj->indexAt("one"));

        $this->assertFalse($obj->indexAt("two"));

        $this->assertTrue($obj->indexAt(1));

        $this->assertFalse($obj->indexAt("three"));

    }

    /**
     * @covers pelau\util\AbstractCollection::itemAt
     */
    public function testItemAt()
    {

        $obj = $this->getMockForAbstractClass("pelau\\util\\AbstractCollection", array(array(1, 2 ,3, "index"=>100)));

        $this->assertTrue($obj->itemAt(0));

        $this->assertTrue($obj->itemAt("index"));

        $this->assertFalse($obj->itemAt("nowhere"));

    }

    /**
     * @covers pelau\util\AbstractCollection::get
     */
    public function testGet()
    {

        $obj = $this->getMockForAbstractClass("pelau\\util\\AbstractCollection", array(array(1,  "index"=>100)));

        $this->assertEquals(1, $obj->get(0));

        $this->assertEquals(100, $obj->get("index"));

    }

    /**
     * @covers pelau\util\AbstractCollection::remove
     */
    public function testRemove()
    {

        $obj = $this->getMockForAbstractClass("pelau\\util\\AbstractCollection", array(array(1, 2)));

        $this->assertTrue($obj->remove(1));

        $this->assertFalse($obj->remove(3));


    }

    /**
     * @covers pelau\util\AbstractCollection::size
     */
    public function testSize()
    {

        $obj = $this->getMockForAbstractClass("pelau\\util\\AbstractCollection", array(array(1, 2)));

        $this->assertEquals(2, $obj->size());

    }

    /**
     * @covers pelau\util\AbstractCollection::isEmpty
     */
    public function testIsEmpty()
    {

        $obj = $this->getMockForAbstractClass("pelau\\util\\AbstractCollection");

        $this->assertTrue($obj->isEmpty());

        $obj = $this->getMockForAbstractClass("pelau\\util\\AbstractCollection", array(array(1, 2)));

        $this->assertFalse($obj->isEmpty());



    }

    /**
     * @covers pelau\util\AbstractCollection::getIterator
     */
    public function testGetIterator()
    {

        $obj = $this->getMockForAbstractClass("pelau\\util\\AbstractCollection");

        $this->assertInstanceOf("\Iterator", $obj->getIterator());

        $this->assertInstanceOf("pelau\util\Iterator", $obj->getIterator());

    }

}
