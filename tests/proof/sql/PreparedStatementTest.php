<?php

namespace proof\sql;


require_once dirname(__FILE__) . '/../../../proof/sql/PreparedStatement.php';

/**
 * Test class for PreparedStatement.
 * <i>Note: This test requires the db_unit_tests_creds.php file to be available and must have the follwing constants
 * decleared:</i>
 * <ul>
 *  <li>DSN --> Database DSN.</li>
 * <li>USRNAME --> username<li>
 * <li> PASSWD --> password</li>
 *
 * Generated by PHPUnit on 2012-08-17 at 23:37:26.
 */
use proof\util\ArrayList;
use proof\util\Map;
class PreparedStatementTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var PreparedStatement
     */
    protected $pdo;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

        $msg = <<<MSG

The file "db_unit_tests_creds.php" was not found! \n Place this file in the same folder as the sql package test folder and
use it to assign the following constants:\n
DSN
USRNAME
PASSWD.\n Please note that this test also requires the saferlanes database to be installed with
a mock plate of pck123 registered.
MSG;

        @((include 'db_unit_tests_creds.php' )) or exit($msg);

        $this->pdo = $pdo = new \PDO(DSN, USRNAME, PASSWD);

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers proof\sql\PreparedStatement::setNamedParams
     *
     */
    public function testSetNamedParams()
    {

        $stmt = new PreparedStatement($this->pdo->prepare('Select * from driver where plate=:plate'));

        $this->assertInstanceOf(get_class($stmt), $stmt->setNamedParams(new Map(array ("plate" => "pck123"))));

    }

    /**
     * @covers proof\sql\PreparedStatement::setPlaceHolderParams
     */
    public function testSetPlaceHolderParams()
    {

        $stmt = new PreparedStatement($this->pdo->prepare('Select * from driver where plate=:plate'));

        $this->assertInstanceOf(get_class($stmt), $stmt->setPlaceHolderParams(new ArrayList(array ("pck123"))));

    }

    /**
     * @covers proof\sql\PreparedStatement::fetch
     * @todo Implement testFetch().
     */
    public function testFetch()
    {

        $namestmt = new PreparedStatement
        (
                $this->pdo->prepare('Insert into driver (plate, timestamp) VALUES(:plate,:timestamp)')
        );

        $namestmt->setNamedParams(new Map( array ("plate" => "pbx44", "timestamp"=>12345633)));

        $namestmt->attachStateListener(new StateHandler);


        $placestmt = new PreparedStatement($this->pdo->prepare('Insert into driver (plate, timestamp) VALUES(?,?)'));

        $placestmt->setPlaceHolderParams(new ArrayList("pbx55", 12345633));

        $placestmt->attachStateListener(new StateHandler);

        $this->assertEquals(1, $placestmt->push());

        $this->assertEquals(1, $namestmt->push());

    }

    /**
     * @covers proof\sql\PreparedStatement::push
     * @todo Implement testPush().
     */
    public function testPush()
    {

        $namestmt = new PreparedStatement($this->pdo->prepare('Insert into driver (plate, timestamp) VALUES(?,?)'));

        $namestmt->setNamedParams(new Map( array ("plate" => "pck123")));

        $namestmt->attachStateListener(new StateHandler);

        $placestmt = new PreparedStatement($this->pdo->prepare('Select * from driver where plate=?'));

        $placestmt->setPlaceHolderParams(new ArrayList(array ("pck123")));

        $placestmt->attachStateListener(new StateHandler);

        $this->assertEquals(1, $placestmt->fetch($this->getMock("proof\sql\FetchHandler")));

        $this->assertEquals(1, $namestmt->fetch($this->getMock("proof\sql\FetchHandler")));

    }

}

class StateHandler implements SQLStateListener
{

    public function onChange(SQLState $state)
    {
        print "SQL Statement failed!\n";
        print_r((array) $state);

    }

}
