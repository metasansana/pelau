<?php

namespace proof\php;


require_once dirname(__FILE__) . '/../../../proof/php/String.php';

/**
 * Test class for String.
 * Generated by PHPUnit on 2012-08-13 at 09:20:41.
 */
class StringTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var String
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new String(NULL);

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers proof\php\String::indexOf
     * @todo Implement testIndexOf().
     */
    public function testIndexOf()
    {

        $this->assertFalse($this->object->indexOf(new String('substring')));

        $string = new String("This is a string with a substring.");

        $this->assertEquals(24, $string->indexOf(new String('substring')));

    }

    /**
     * @covers proof\php\String::matches
     *
     */
    public function testMatches()
    {

        $string = new String("A string.");

        $this->assertTrue($string->matches(new String("/A\ string\./")));

        $this->assertFalse($string->matches(new String("/^B/")));

    }

    /**
     * @covers proof\php\String::length
     *
     */
    public function testLength()
    {

        $this->assertEquals(0, $this->object->length());

        $string = new String("Not zero");

        $this->assertEquals(8, $string->length());

    }

    /**
     * @covers proof\php\String::append
     *
     */
    public function testAppend()
    {

        $text = "Keshorn took gold in the javelin throw.";
        $this->assertEquals($text, (string) $this->object->append(new String($text)));

    }

    /**
     * @covers proof\php\String::prepend
     *
     */
    public function testPrepend()
    {

        $text = "Keshorn took gold in the javelin throw.";
        $this->assertEquals($text, (string) $this->object->prepend(new String($text)));

    }

    /**
     * @covers proof\php\String::replace
     *
     */
    public function testReplace()
    {

        $string = new String("I went to secret.");

        $this->assertEquals("I went to work.", (string) $string->replace(new String("secret"), new String("work")));

        $string = new String("AAA");

        $this->assertEquals("CCC", (string) $string->replace(new String("A"), new String("C"), 3));

    }

    /**
     * @covers proof\php\String::reverse
     * @todo Implement testReverse().
     */
    public function testReverse()
    {

        $string = new String("123456789");

        $this->assertEquals("987654321", (string) $string->reverse());

    }

    /**
     * @covers proof\php\String::cut
     *
     */
    public function testCut()
    {


        $string = new String("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

        $this->assertEquals("HIJKLM", (string) $string->cut(7, 6));

    }

    /**
     * @covers proof\php\String::split
     *
     */
    public function testSplit()
    {

        $text = new String("ABC|123|A2C");

        $array = $text->split(new String("|"));

        $this->assertEquals("ABC", $array[0]);
        $this->assertEquals("123", $array[1]);
        $this->assertEquals("A2C", $array[2]);


    }

}

?>
