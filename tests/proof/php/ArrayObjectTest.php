<?php

namespace pelau\php;


require_once dirname(__FILE__) . '/../../../pelau/php/ArrayObject.php';

/**
 * Test class for ArrayObject.
 * Generated by PHPUnit on 2012-08-10 at 19:51:40.
 */
class ArrayObjectTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ArrayObject
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ArrayObject;

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers pelau\php\ArrayObject::offsetExists
     * @todo Implement testOffsetExists().
     */
    public function testOffsetExists()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );

    }

    /**
     * @covers pelau\php\ArrayObject::offsetGet
     * @depends testOffsetSet
     */
    public function testOffsetGet()
    {

        $this->object[0] = 'mock';
        $this->object['one'] = 'mock';

        $this->assertEquals('mock', $this->object[0]);
        $this->assertEquals('mock', $this->object['one']);

    }

    /**
     * @covers pelau\php\ArrayObject::offsetSet
     * @todo Implement testOffsetSet().
     */
    public function testOffsetSet()
    {

        $this->assertInstanceOf(get_class($this->object), $this->object[0] = 'mock');
        $this->assertInstanceOf(get_class($this->object), $this->object['one'] = 'mock');

    }

    /**
     * @covers pelau\php\ArrayObject::offsetUnset
     *
     */
    public function testOffsetUnset()
    {

        $this->object[0] = 'mock';
        $this->object['one'] = 'mock';

        unset($this->object[0]);
        unset($this->object['one']);

        $this->assertNull($this->object[0]);
        $this->assertNull($this->object['one']);

    }

    /**
     * @covers pelau\php\ArrayObject::count
     *
     */
    public function testCount()
    {

        $this->assertEquals(0, count($this->object));

    }

    public function testGetIterator()
    {
        $stub = new ArrayObject(array(1,1,1,1,1));

        foreach ($stub as $value)
        {
            $this->assertEquals(1, $value);
        }
    }

    public function testArrayFunctions()
    {
        $this->assertFalse(array_key_exists("key", $this->object));
        $this->assertEquals(0, count($this->object));

    }

}

?>
